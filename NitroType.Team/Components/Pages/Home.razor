@page "/"
@inject NitroTypeApiClient NitroTypeApiClient

<div style="margin: 0 auto; text-align: center;">
    <h1 style="color: red">Keyboard Elite Cats [KECATS]</h1>
    <h2>We type as accurate as cats do!</h2>
    <h1>Current league season statistics</h1>
    <h3>Started on April 10</h3>
    <img alt="cat" src="cat.webp"/>

    <!--<p>Necessary text length for 1 error leaving 100% accuracy: <span style="font-weight: bold;">192</span> (or 90 WPM)</p>-->
    <!--<p>Statistics is updated every 1-5 minutes, difference is highlighted over the last 24 hours. Table is ordered by Accuracy.</p>-->
    <p>Statistics is updated every 1-5 minutes. Table is ordered by Accuracy. Diffs are based on last 24 hours.</p>

    <table class="cats-table">
        <thead>
        <tr>
            <th>Cat name</th>
            <th>Accuracy</th>
            <th>Average speed</th>
            <th>Average text length</th>
            <th>Characters typed (errors)</th>
            <th>Races</th>
            <th>Time spent</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cat in cats)
    {
        <tr>
                <td>@cat.Name</td>
                <td>@cat.Accuracy.ToString("#.####") <span class="diff @(cat.AccuracyDiff > 0 ? "good" : "bad")">@cat.AccuracyDiffText</span></td>
                <td>@cat.AverageSpeed.ToString("#.##") <span class="diff @(cat.AverageSpeedDiff > 0 ? "good" : "bad")">@cat.AverageSpeedDiffText</span></td>
                <td>@cat.AverageTextLength.ToString("#.##")</td>
                <td>@cat.typed (@cat.errs)</td>
                <td>@cat.played</td>
                <td>@cat.TimeSpent</td>
            </tr>
    }
        </tbody>
    </table>
</div>

@code {
    private IEnumerable<CatInfo> cats = [];

    protected override async Task OnInitializedAsync()
    {
        cats = (await NitroTypeApiClient.GetCatsInfoAsync())
            //.Where(c => c.username != "keyboard_elite_cat" && c.username != "ewancoder")
            .Where(c => c.username != "keyboard_elite_cat")
            .OrderByDescending(c => c.Accuracy);
    }
}
